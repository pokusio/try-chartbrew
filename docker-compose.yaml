# ---
# see : https://github.com/chartbrew/chartbrew#quickstart
version: '3.9'

# Settings and configurations that are common for all containers
x-chartbrew-common: &chartbrew-common
  # image: razvanilin/chartbrew
  image: razvanilin/chartbrew:pokus-io
  # container_name: pokus_dev
  build:
      context: oci/chartbrew/
      dockerfile: Dockerfile
      # args:
        # # see https://ccc
        # - POKUS_USER_UID=$POKUS_USER_UID
        # - POKUS_USER_GID=$POKUS_USER_GID
  # command: npm start
  restart: unless-stopped
  expose:
    - "${CHARTBREW_CLIENT_PORT}"
    - "${CHARTBREW_API_PORT}"
  # ports:
    # - "${CHARTBREW_CLIENT_PORT}:${CHARTBREW_CLIENT_PORT}"
    # - "${CHARTBREW_API_PORT}:${CHARTBREW_API_PORT}"
  environment:
    CB_SECRET: ${CB_SECRET}
    CB_API_HOST: ${CB_API_HOST}
    CB_API_PORT: ${CB_API_PORT}
    CB_DB_DIALECT: ${CB_DB_DIALECT}
    CB_DB_HOST: ${CB_DB_HOST}
    CB_DB_PORT: ${CB_DB_PORT}
    CB_DB_NAME: ${CB_DB_NAME}
    CB_DB_USERNAME: ${CB_DB_USERNAME}
    CB_DB_PASSWORD: ${CB_DB_PASSWORD}
    REACT_APP_CLIENT_HOST: "http://${POKUS_CHARTBREW_WEB_FQDN}:${CHARTBREW_CLIENT_PORT}"
    REACT_APP_API_HOST: "http://${POKUS_CHARTBREW_API_FQDN}:${CHARTBREW_API_PORT}"
  # healthcheck:
    # test: ["CMD", "curl", "-f", "http://localhost:9000/chartbrew/health/live"]
    # interval: 30s
    # timeout: 20s
    # retries: 3

# --- # --- # --- # --- # --- # --- # --- # --- # --- # --- # --- # --- #
services:
  # --- # --- # --- # --- # --- #
  # # --- # --- # --- # --- #
  # # Starts 4 docker containers running chartbrew server instances.
  # # Using nginx reverse proxy, load balancing, you can access chartbrew API through port CHARTBREW_API_PORT, and chartbrew webui through port CHARTBREW_CLIENT_PORT.
  # Starts 1 docker container running chartbrew api and serving chartbrew webui.
  chartbrew:
    <<: *chartbrew-common
    hostname: chartbrew
    # volumes:
      # - data1-1:/data1
      # - data1-2:/data2
    depends_on:
      - chartbrew_db
    networks:
      chartbrew_net:
        aliases:
          - chartbew.pokus.io
          - chartbrew_api.pokus.io
  # --- # --- # --- # --- # --- #
  # # --- # --- # --- # --- #
  # # Postgres DB for chartbrew
  chartbrew_db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: ${CB_DB_NAME}
      MYSQL_USER: ${CB_DB_USERNAME}
      MYSQL_PASSWORD: ${CB_DB_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    expose:
      - ${CB_DB_PORT}
    # ports:
      # - ${CB_DB_PORT}:${CB_DB_PORT}
    # volumes:
      # - chartbrew-db:/var/lib/mysql
      # # - ./init-chartbrew-db.sql:/docker-entrypoint-initdb.d/init-chartbrew-db.sql
    env_file:
      - ./.env
    networks:
      chartbrew_net:
        aliases:
          - ${CB_DB_HOST}

  devops_net_probe:
    image: debian:bullseye-slim
    hostname: devops_net_probe
    networks:
      zero_chamber_net:
      chartbrew_net:
        aliases:
          - devops_net_probe.pokus.io
          # - "${POKUS_CHARTBREW_WEB_FQDN}"
          # - "${POKUS_CHARTBREW_API_FQDN}"
    # extra_hosts:
      # - "${POKUS_CHARTBREW_WEB_FQDN}:${DOCK_HOST_IP_ADDR}"
      # - "${POKUS_CHARTBREW_API_FQDN}:${DOCK_HOST_IP_ADDR}"
    depends_on:
      - nginx
    env_file:
      - ./.env
  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "${CHARTBREW_CLIENT_PORT}:${CHARTBREW_CLIENT_PORT}"
      - "${CHARTBREW_API_PORT}:${CHARTBREW_API_PORT}"
    networks:
      zero_chamber_net:
      chartbrew_net:
        aliases:
          - nginx.pokus.io
          # - "${POKUS_CHARTBREW_WEB_FQDN}"
          # - "${POKUS_CHARTBREW_API_FQDN}"
    # extra_hosts:
      # - "${POKUS_CHARTBREW_WEB_FQDN}:${DOCK_HOST_IP_ADDR}"
      # - "${POKUS_CHARTBREW_API_FQDN}:${DOCK_HOST_IP_ADDR}"
    depends_on:
      - chartbrew
      - chartbrew_db
      # - chartbrew1
      # - chartbrew2
      # - chartbrew3
      # - chartbrew4
    env_file:
      - ./.env
## By default this config uses default local driver,
## For custom volumes replace with volume driver configuration.
volumes:
  chartbrew-db:
  # data1-1:
  # data1-2:
  # data2-1:
  # data2-2:
  # data3-1:
  # data3-2:
  # data4-1:
  # data4-2:
networks:
  # --- # --- # --- # --- # --- # --- # --- # --- #
  # zero chamber is the network users
  # hit to HTTP query Chartbrew frontend and api
  # --- # --- # --- # --- # --- # --- # --- # --- #
  zero_chamber_net:
    name: zero_chamber_net
  # --- # --- # --- # --- # --- # --- # --- # --- #
  # Users cannot access postgres at all, not
  # even through the reverse proxy 
  # Users can access both chartbrew frontend 
  # and api, but only through reverse proxy
  # --- # --- # --- # --- # --- # --- # --- # --- #
  # 
  # --- # --- # --- # --- # --- # --- # --- # --- #
  chartbrew_net:
    name: chartbrew_net
    internal: true